# -*- coding: utf-8 -*-
"""2025 JapaneseGP Advanced.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RL2gsGcQNNRD0c7zV74ALXtWzTE3RpEq
"""

!pip install fastf1 scikit-learn pandas numpy --quiet

import os
import fastf1

os.makedirs("/content/f1_cache", exist_ok=True)

fastf1.Cache.enable_cache("/content/f1_cache")

import pandas as pd
import numpy as np
import requests
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error

# Load 2024 Japanese GP race session and extract lap and sector times
session_2024 = fastf1.get_session(2024, "Japan", "R")
session_2024.load()

laps_2024 = session_2024.laps[["Driver", "LapTime", "Sector1Time", "Sector2Time", "Sector3Time"]].copy()
laps_2024.dropna(inplace=True)

# Convert timedelta columns to seconds
for col in ["LapTime", "Sector1Time", "Sector2Time", "Sector3Time"]:
    laps_2024[f"{col} (s)"] = laps_2024[col].dt.total_seconds()

# Calculate average sector times per driver
sector_times_2024 = laps_2024.groupby("Driver")[["Sector1Time (s)", "Sector2Time (s)", "Sector3Time (s)"]].mean().reset_index()

# Manually input 2025 qualifying results
qualifying_2025 = pd.DataFrame({
    "Driver": ["VER", "NOR", "PIA", "LEC", "RUS", "HAM", "GAS", "ALO", "TSU", "SAI", "HUL", "OCO", "STR"],
    "QualifyingTime (s)": [86.983, 86.995, 87.027, 87.299, 87.318, 87.610, 87.822, 87.897, 88.000, 87.836, 88.570, 88.696, 89.271]
})

# Wet performance factor (assumed from another script or model)
driver_wet_performance = {
    "VER": 0.975196, "HAM": 0.976464, "LEC": 0.975862,
    "NOR": 0.978179, "ALO": 0.972655, "RUS": 0.968678,
    "SAI": 0.978754, "TSU": 0.996338, "OCO": 0.981810,
    "GAS": 0.978832, "STR": 0.979857
}

qualifying_2025["WetPerformanceFactor"] = qualifying_2025["Driver"].map(driver_wet_performance)

# Enter your OpenWeather API key
API_KEY = "4e078bd52791a7bbc6b52a90051e12f7"

# Suzuka Circuit coordinates
weather_url = f"http://api.openweathermap.org/data/2.5/forecast?lat=34.8823&lon=136.5845&appid={API_KEY}&units=metric"
response = requests.get(weather_url)
weather_data = response.json()
print(weather_data)

# Extract weather forecast for race time: Sunday, April 5, 2025, 2PM JST
forecast_time = "2025-04-05 14:00:00"
forecast_data = None

for forecast in weather_data["list"]:
    if forecast["dt_txt"] == forecast_time:
        forecast_data = forecast
        break

if forecast_data:
    rain_probability = forecast_data["pop"]
    temperature = forecast_data["main"]["temp"]
else:
    rain_probability = 0
    temperature = 20  # default fallback

# Merge sector times with qualifying results
merged_data = qualifying_2025.merge(sector_times_2024, on="Driver", how="left")

# Add weather features
merged_data["RainProbability"] = rain_probability
merged_data["Temperature"] = temperature

# Define features and target
X = merged_data[["QualifyingTime (s)", "Sector1Time (s)", "Sector2Time (s)", "Sector3Time (s)",
                 "WetPerformanceFactor", "RainProbability", "Temperature"]].fillna(0)

# Target: average race lap time per driver
y = merged_data.merge(
    laps_2024.groupby("Driver")["LapTime (s)"].mean(),
    on="Driver"
)["LapTime (s)"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=38)

# Initialize and train model
model = GradientBoostingRegressor(n_estimators=200, learning_rate=0.1, random_state=38)
model.fit(X_train, y_train)

# Predict race performance
predicted_race_times = model.predict(X)
qualifying_2025["PredictedRaceTime (s)"] = predicted_race_times

# Sort by predicted performance
qualifying_2025 = qualifying_2025.sort_values("PredictedRaceTime (s)")

# Output prediction results
print("\nüèÅ Predicted 2025 Japanese GP Winner üèÅ\n")
print(qualifying_2025[["Driver", "PredictedRaceTime (s)"]])

# Evaluate with Mean Absolute Error
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
print(f"\nüîç Model Error (MAE): {mae:.2f} seconds")